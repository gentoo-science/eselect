# -*-eselect-*-  vim: ft=eselect
# Copyright 2006-2015 Gentoo Foundation
# Distributed under the terms of the GNU GPL version 2 or later

inherit config output tests

DESCRIPTION="Query eselect modules"
MAINTAINER="eselect@gentoo.org"

DEFAULT_ACTION="list"

### list action

describe_list() {
	echo "List all available modules"
}

# List all installed modules
do_list() {
    local path file module name desc group groups Extra_modules

    write_list_start "Built-in modules:"
    write_kv_list_entry "help"          "Display a help message"
    write_kv_list_entry "usage"         "Display a usage message"
    write_kv_list_entry "version"       "Display version information"
    write_kv_list_entry "print-modules" "Print eselect modules"
    write_kv_list_entry "print-actions" "Print actions for a given module"
    write_kv_list_entry "print-options" "Print options for a given action"

    for path in "${ESELECT_MODULES_PATH[@]}" ; do
        [[ -d ${path} ]] || continue
        for file in ${path}/*.eselect ; do
            [[ -f ${file} ]] || continue
            group=$(load_config "${file}" ESELECT_MODULE_GROUP)
            if [[ -n ${group} ]]; then
                has ${group} ${groups} || groups+=" ${group}"
                declare ${group}_modules+=" ${file}"
            else
                Extra_modules+=" ${file}"
            fi
        done
    done

    for group in ${groups} Extra; do
        local m
        m="${group}_modules"
        if [[ -n ${!m} ]] ; then
            echo
            write_list_start "${group} modules:"
            for module in ${!m}; do
                name=${module##*/}
                name=${name%%.eselect}
                desc=$(load_config "${module}" DESCRIPTION)
                desc=${desc:-No description available}
                write_kv_list_entry "${name}" "${desc}"
            done
        fi
    done
}

### group action

describe_group() {
    echo "Lists all available modules belonging to a specified group."
}

describe_group_parameters() {
    echo "<group>"
}

do_group() {
    local path file groupname="$1" group module modules name desc
    [[ -z "$groupname" ]] && die -q "Required option (group name) missing."

    if [[ ${groupname} == Built-in ]]; then
        write_list_start "Built-in modules:"
        write_kv_list_entry "help"          "Display a help message"
        write_kv_list_entry "usage"         "Display a usage message"
        write_kv_list_entry "version"       "Display version information"
        return 0
    fi

    for path in "${ESELECT_MODULES_PATH[@]}" ; do
        [[ -d ${path} ]] || continue
        for file in ${path}/*.eselect ; do
            [[ -f ${file} ]] || continue
            group=$(load_config "${file}" ESELECT_MODULE_GROUP)
            [[ ${groupname} == ${group} ||
                ( ${groupname} == Extra && -z ${group} ) ]] || continue
            modules+=" ${file}"
        done
    done

    if [[ -n ${modules} ]] ; then
        write_list_start "${groupname} modules:"
        for module in ${modules}; do
            name=${module##*/}
            name=${name%%.eselect}
            desc=$(load_config "${module}" DESCRIPTION)
            desc=${desc:-No description available}
            write_kv_list_entry "${name}" "${desc}"
        done
    else
        die -q "No modules belonging to ${groupname} was found"
    fi
}

### has action

describe_has() {
	echo "Return true if the module is installed, and false otherwise"
}

describe_has_parameters() {
    echo "<module>"
}

do_has() {
    [[ -z $1 ]] && die -q "Required option (module name) missing"
    [[ $# -gt 1 ]] && die -q "Too many parameters"
    local modname="$1" modpath
    [[ -z "$modname" ]] && die -q "Required option (module name) missing."
    for modpath in "${ESELECT_MODULES_PATH[@]}" ; do
        [[ -f "${modpath}/${modname}.eselect" ]] && return 0
    done
    return 1
}

### add action

describe_add() {
    echo "Install a module file to \$HOME/.eselect/modules/, or ${ESELECT_DEFAULT_MODULES_PATH//\/\///}/ when run as root"
}

describe_add_parameters() {
    echo "<module_file>"
}

do_add() {

    local local_path="${ROOT}${HOME}/.eselect/modules/" module_file
    local force_default=0

    if [[ $1 = "--force-default-location" ]] ; then
        force_default=1
        shift
    fi
    module_file=$1

    [[ -z ${module_file} ]] && die -q "Required option (module file) missing"

    # TODO: Don't install the module "somewhere", depending on write access.
    # Add an option to control if it goes to the user's or to the system dir.
    if ! cp "${module_file}" "${ESELECT_DEFAULT_MODULES_PATH}" &> /dev/null ; then
        [[ ${force_default} == 1 ]] \
            && die -q "Failed to install module file to default modules path"

        mkdir -p "${local_path}" \
            || die -q "Failed to create module install directory"
        cp "${module_file}" "${local_path}" \
                       || die -q "Failed to install module file"
    fi
}

### remove action

describe_remove() {
    echo "Remove the given module name"
    echo "By default, it will remove from \$HOME/.eselect/modules/, unless running as "
    echo "root. Then, remove from ${ESELECT_DATA_PATH}/modules/."
}

describe_remove_parameters() {
    echo "<module>"
}

do_remove() {
    local local_path="${ROOT}${HOME}/.eselect/modules/" module_name
    local force_default=0

    if [[ $1 = "--force-default-location" ]] ; then
        force_default=1
        shift
    fi
    module_name=$1

    [[ -z ${module_name} ]] && die -q "Required option (module name) missing"

    # TODO: Don't install the module "somewhere", depending on write access.
    # Add an option to control if it goes to the user's or to the system dir.
    if ! rm "${ESELECT_DEFAULT_MODULES_PATH}"/${module_name}.eselect &> /dev/null ; then
        [[ ${force_default} == 1 ]] \
            && die -q "Failed to remove module ${module_name} from default modules path"

        rm "${module_file}" "${local_path}"/${module_name}.eselect \
            || die -q "Failed to remove module ${module_name}"
       fi
}

# vim: set ft=eselect sw=4 sts=4 ts=4 et tw=80 :
