#!@BASH@
# -*-eselect-*-  vim: ft=eselect
# Copyright (c) 2005-2015 Gentoo Foundation
#
# This file is part of the 'eselect' tools framework.
#
# eselect is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later
# version.
#
# eselect is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# eselect.  If not, see <http://www.gnu.org/licenses/>.

# Where are our data?
ESELECT_DATA_PATH="@DATADIR@/eselect"

# Where are modules installed by default?
ESELECT_DEFAULT_MODULES_PATH="${ESELECT_DATA_PATH}/modules"

# Where are auto-generated modules placed? (e.g. from alternatives-2.eclass)
ESELECT_AUTO_GENERATED_MODULES_PATH="${ESELECT_DEFAULT_MODULES_PATH}/auto"

# Where the users store their modules
ESELECT_USER_MODULES_PATH="${ROOT}${HOME}/.eselect/modules"

# Look in these places for modules
ESELECT_MODULES_PATH=(
	"${ESELECT_USER_MODULES_PATH}}"
	"${ESELECT_DEFAULT_MODULES_PATH}"
	"${ESELECT_AUTO_GENERATED_MODULES_PATH}"
)

# Look in this place for libraries
ESELECT_CORE_PATH="${ESELECT_DATA_PATH}/libs"

# Look here for the default contents of a module
ESELECT_DEFAULT_ACTIONS="${ESELECT_CORE_PATH}/default.eselect"

# Our program name and version
ESELECT_PROGRAM_NAME="eselect"
ESELECT_VERSION="@VERSION@"

# Invocation information
ESELECT_BINARY_NAME="$0"
ESELECT_KILL_TARGET="$$"

# Support variables for Gentoo Prefix
EPREFIX="@EPREFIX@"
EROOT="${ROOT%${EPREFIX:+/}}${EPREFIX}"

# Remove all alias definitions. Unset functions and variables that are
# known to cause trouble.
"unalias" -a
unset -f rm
unset CDPATH GLOBIGNORE
IFS=$' \t\n'

shopt -s extglob
shopt -s expand_aliases

# Save stderr file descriptor
if (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 1 || BASH_VERSINFO[0] > 4 ))
then
	exec {ESELECT_STDERR}>&2	# >=bash-4.1
fi

# Load core functions
source "${ESELECT_CORE_PATH}/core.bash" || exit 255
# Load necessary functions for the main script
inherit manip output path-manipulation tests config

# Sneaky trick to make die in subshells work. If you don't get
# it, don't ask...
trap 'echo "exiting" >&2; exit 250' 15

# es_find_module foo
# Find and echo the filename of the foo module. If there's no foo module,
# die.
es_find_module() {
    local modname="$1" modpath="" modfile=""
	[[ -z ${modname} ]] && die "Usage: ${FUNCNAME} <module>"
	for modpath in "${ESELECT_MODULES_PATH[@]}" ; do
		[[ -f ${modpath}/${modname}.eselect ]] && break
	done

	modfile="${modpath}/${modname}.eselect"
	[[ -r ${modfile} ]] || die -q "Can't load module ${modname}"
	echo ${modfile}
}

# es_do_usage
# Display eselect usage
es_do_usage() {
	echo "Usage: eselect <global options> <module name> <module options>"
}

# es_do_help
# Display eselect help
es_do_help() {
	es_do_usage
	echo
	es_do_list-options
	echo
	# display all available eselect modules
	es_do_list-modules
}

# es_do_version
# Display eselect version
es_do_version() {
	echo "eselect ${ESELECT_VERSION}"
	echo
	echo "Copyright (c) 2005-2015 Gentoo Foundation."
	echo "Distributed under the terms of the GNU GPL version 2 or later."
}

# es_do_list-options
# Display all recognized global options
es_do_list-options() {
	write_list_start "Global options:"
	write_kv_list_entry "--brief"                   "Make output shorter"
	write_kv_list_entry "--colour=<yes|no|auto>"    "Enable or disable colour output (default 'auto')"
	write_kv_list_entry "--debug"                   "Debug eselect (enable set -x)"
}

# es_do_list-modules
# Display all available eselect modules DEPRECATED
es_do_list-modules() {
	do_action modules list $@
}

### print-* actions, for use with bash_completion and zsh-completion ###

# es_do_print-modules
#
# Display all availble eselect modules in a way that's useful to bash
# completion / zsh completion
es_do_print-modules() {
	local ret=1 path module group groupname want_descriptions

	while [[ -n $@ ]]; do
		case "${1}" in
			--descriptions)
				want_descriptions='yes' ;;
			--group)
				groupname=${2}
				[[ -z "$groupname" ]] && die -q "Required option (group name) missing."
				shift ;;
		esac
		shift
	done

	if [[ ${groupname} == Built-in || -z ${groupname} ]]; then
		for module in help usage version print-{modules,actions,options}; do
			echo "${module}"
		done
		[[ ${groupname} == Built-in ]] && return 0
	fi

	# TODO: factor this out in modules.eselect's do_list()
	for path in "${ESELECT_MODULES_PATH[@]}" ; do
		[[ -d "${path}" ]] || continue
		for file in "${path}"/*.eselect ; do
			[[ -f "${file}" ]] || continue
			if [[ -n "${groupname}" ]]; then
				group=$(load_config "${file}" ESELECT_MODULE_GROUP)
				[[ "${groupname}" == "${group}" ||
					( "${groupname}" == Extra && -z "${group}" ) ]] || continue
			fi
			module="${file##*/}"
			module="${module%%.eselect}"
			echo "${module}${want_descriptions:+:$(load_config "${file}" DESCRIPTION)}"
			ret=0
		done
	done
	return $ret
}

# es_do_print-actions
#
# Display all available actions for the given module.
es_do_print-actions() {
	local modfile="$(es_find_module "${1}")" actions action want_descriptions
	[[ "${2}" == "--descriptions" ]] && want_descriptions='yes'
	(
		source "${modfile}" 2>/dev/null \
			|| die "Couldn't source ${modfile}"
		actions=( $(declare -F \
			| sed -n -e 's/^declare\s\+-f\s\+do_//p' \
			| egrep -v '^(action|help|usage|version)$' \
			| sort ) )
		for action in "${actions[@]}" ; do
			echo "${action}${want_descriptions:+:$(describe_${action})}"
		done
	)
}

# es_do_print-options
#
# Display all available options for the given module and action
es_do_print-options() {
	local modfile action want_descriptions

	[[ "${1}" == "--descriptions" ]] && want_descriptions='yes' && shift

	if [[ -z ${1} ]]; then
		echo "--debug${want_descriptions:+:Debug eselect (enable set -x)}"
		echo "--no-color${want_descriptions:+:Disable coloured output}"
		echo "--no-colour${want_descriptions:+:Disable coloured output}"
	elif [[ -n ${2} ]]; then
		modfile="$(es_find_module "${1}")"
		action=${2}
		shift 2
		(
			source "${modfile}" 2>/dev/null \
				|| die "Couldn't source ${modfile}"
			is_function options_${action} || return 1
			options_${action} ${want_descriptions:+--descriptions} "$@" || return 2
		)
	else
		die "Usage: ${FUNCNAME} [--descriptions] [<module> <action>]"
	fi
}

### main code ###

# figure out what the action is. we need to know whether we're
# invoked as a something-config/something-update.
action=""
for suffix in config update{,r} tool manager reader; do
	if [[ ${0%%-${suffix}} != "$0" ]]; then
		action=$(basename "$0")
		action=${action%%-${suffix}}
		break
	fi
done
unset suffix

if [[ -z ${action} ]]; then
	binname=$(basename "$0")
	for prefix in config update{,r} manage 'read'; do
		if [[ ${binname##${prefix}-} != ${binname} ]]; then
			action=$(basename "$0")
			action=${action##${prefix}-}
			break
		fi
	done
	unset binname prefix
fi

# parse global options
while [[ ${1##--} != "$1" ]]; do
	case ${1##--} in
		brief)
			set_output_mode brief
			;;
		colour=*|color=*|colour|color)
			# accept all arguments that are valid for ls or emerge
			case ${1#*=} in
				yes|y|always|force|$1) colour=yes ;;
				no|n|never|none) colour=no ;;
				auto|tty|if-tty) colour="" ;;
				*) die -q "Invalid argument for ${1%%=*} option" ;;
			esac
			;;
		debug)
			set -x
			;;
		help|version)
			[[ -z ${action} ]] || die -q "Too many parameters"
			action=${1##--}
			;;
		"")
			# -- indicates end of options
			shift
			break
			;;
		*)
			die -q "Unknown option $1"
			;;
	esac
	shift
done

if [[ -z ${action} && $# -gt 0 ]]; then
	action=$1
	shift
fi

# enable colour output and get width of terminal iff stdout is a tty
if [[ -t 1 ]]; then
	colours ${colour:-yes}
	init_columns
else
	colours ${colour:-no}
fi
unset colour

if [[ -n ${action} ]]; then
	if is_function "es_do_${action}"; then
		[[ $# -eq 0 ]] || die -q "Too many parameters"
		es_do_${action}
	else
		do_action "${action}" "$@"
	fi
else
	es_do_help
fi
